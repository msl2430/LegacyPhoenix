'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3074
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PhoenixCaseDataDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PhoenixCaseDataDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableIMPSInformation As IMPSInformationDataTable
    
    Private tableFAMISCaseInformation As FAMISCaseInformationDataTable
    
    Private tableTransactionLog As TransactionLogDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IMPSInformation")) Is Nothing) Then
                MyBase.Tables.Add(New IMPSInformationDataTable(ds.Tables("IMPSInformation")))
            End If
            If (Not (ds.Tables("FAMISCaseInformation")) Is Nothing) Then
                MyBase.Tables.Add(New FAMISCaseInformationDataTable(ds.Tables("FAMISCaseInformation")))
            End If
            If (Not (ds.Tables("TransactionLog")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionLogDataTable(ds.Tables("TransactionLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPSInformation() As IMPSInformationDataTable
        Get
            Return Me.tableIMPSInformation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FAMISCaseInformation() As FAMISCaseInformationDataTable
        Get
            Return Me.tableFAMISCaseInformation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TransactionLog() As TransactionLogDataTable
        Get
            Return Me.tableTransactionLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PhoenixCaseDataDataSet = CType(MyBase.Clone,PhoenixCaseDataDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IMPSInformation")) Is Nothing) Then
                MyBase.Tables.Add(New IMPSInformationDataTable(ds.Tables("IMPSInformation")))
            End If
            If (Not (ds.Tables("FAMISCaseInformation")) Is Nothing) Then
                MyBase.Tables.Add(New FAMISCaseInformationDataTable(ds.Tables("FAMISCaseInformation")))
            End If
            If (Not (ds.Tables("TransactionLog")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionLogDataTable(ds.Tables("TransactionLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIMPSInformation = CType(MyBase.Tables("IMPSInformation"),IMPSInformationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPSInformation) Is Nothing) Then
                Me.tableIMPSInformation.InitVars
            End If
        End If
        Me.tableFAMISCaseInformation = CType(MyBase.Tables("FAMISCaseInformation"),FAMISCaseInformationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFAMISCaseInformation) Is Nothing) Then
                Me.tableFAMISCaseInformation.InitVars
            End If
        End If
        Me.tableTransactionLog = CType(MyBase.Tables("TransactionLog"),TransactionLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTransactionLog) Is Nothing) Then
                Me.tableTransactionLog.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PhoenixCaseDataDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PhoenixCaseDataDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIMPSInformation = New IMPSInformationDataTable
        MyBase.Tables.Add(Me.tableIMPSInformation)
        Me.tableFAMISCaseInformation = New FAMISCaseInformationDataTable
        MyBase.Tables.Add(Me.tableFAMISCaseInformation)
        Me.tableTransactionLog = New TransactionLogDataTable
        MyBase.Tables.Add(Me.tableTransactionLog)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPSInformation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFAMISCaseInformation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTransactionLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PhoenixCaseDataDataSet = New PhoenixCaseDataDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IMPSInformationRowChangeEventHandler(ByVal sender As Object, ByVal e As IMPSInformationRowChangeEvent)
    
    Public Delegate Sub FAMISCaseInformationRowChangeEventHandler(ByVal sender As Object, ByVal e As FAMISCaseInformationRowChangeEvent)
    
    Public Delegate Sub TransactionLogRowChangeEventHandler(ByVal sender As Object, ByVal e As TransactionLogRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPSInformationDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCaseNumber As Global.System.Data.DataColumn
        
        Private columnDateEntered As Global.System.Data.DataColumn
        
        Private columnIssType As Global.System.Data.DataColumn
        
        Private columnIndCode As Global.System.Data.DataColumn
        
        Private columnPayTypeCode As Global.System.Data.DataColumn
        
        Private columnWarrantNumber As Global.System.Data.DataColumn
        
        Private columnIssDate As Global.System.Data.DataColumn
        
        Private columnCheckAmt As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnInt1 As Global.System.Data.DataColumn
        
        Private columnPaymentToCase As Global.System.Data.DataColumn
        
        Private columnVendorName As Global.System.Data.DataColumn
        
        Private columnExtraName As Global.System.Data.DataColumn
        
        Private columnStreet As Global.System.Data.DataColumn
        
        Private columnCityState As Global.System.Data.DataColumn
        
        Private columnZipCode As Global.System.Data.DataColumn
        
        Private columnProvCode As Global.System.Data.DataColumn
        
        Private columnSSNFedID As Global.System.Data.DataColumn
        
        Private columnEAInd As Global.System.Data.DataColumn
        
        Private columnSSNFedIDName As Global.System.Data.DataColumn
        
        Private columnSupvr As Global.System.Data.DataColumn
        
        Private columnWorkerNumber As Global.System.Data.DataColumn
        
        Private columnMunicipalityCode As Global.System.Data.DataColumn
        
        Private columnVoucherNumber As Global.System.Data.DataColumn
        
        Private columnDropped As Global.System.Data.DataColumn
        
        Private columnReason As Global.System.Data.DataColumn
        
        Private columnReason2 As Global.System.Data.DataColumn
        
        Private columnReason3 As Global.System.Data.DataColumn
        
        Private columnReason4 As Global.System.Data.DataColumn
        
        Private columnReason5 As Global.System.Data.DataColumn
        
        Private columnBatchNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPSInformation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaseNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaseNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEnteredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEntered
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayTypeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayTypeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WarrantNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarrantNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Int1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnInt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentToCaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentToCase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtraNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtraName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCityState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSNFedIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSNFedID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EAIndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEAInd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSNFedIDNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSNFedIDName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupvrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupvr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkerNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkerNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunicipalityCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunicipalityCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DroppedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDropped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reason2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reason3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reason4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reason5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPSInformationRow
            Get
                Return CType(Me.Rows(index),IMPSInformationRow)
            End Get
        End Property
        
        Public Event IMPSInformationRowChanging As IMPSInformationRowChangeEventHandler
        
        Public Event IMPSInformationRowChanged As IMPSInformationRowChangeEventHandler
        
        Public Event IMPSInformationRowDeleting As IMPSInformationRowChangeEventHandler
        
        Public Event IMPSInformationRowDeleted As IMPSInformationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPSInformationRow(ByVal row As IMPSInformationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPSInformationRow( _
                    ByVal CaseNumber As String,  _
                    ByVal DateEntered As Date,  _
                    ByVal IssType As String,  _
                    ByVal IndCode As String,  _
                    ByVal PayTypeCode As String,  _
                    ByVal WarrantNumber As String,  _
                    ByVal IssDate As String,  _
                    ByVal CheckAmt As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Int1 As String,  _
                    ByVal PaymentToCase As String,  _
                    ByVal VendorName As String,  _
                    ByVal ExtraName As String,  _
                    ByVal Street As String,  _
                    ByVal CityState As String,  _
                    ByVal ZipCode As String,  _
                    ByVal ProvCode As String,  _
                    ByVal SSNFedID As String,  _
                    ByVal EAInd As String,  _
                    ByVal SSNFedIDName As String,  _
                    ByVal Supvr As String,  _
                    ByVal WorkerNumber As String,  _
                    ByVal MunicipalityCode As String,  _
                    ByVal VoucherNumber As String,  _
                    ByVal Dropped As String,  _
                    ByVal Reason As String,  _
                    ByVal Reason2 As String,  _
                    ByVal Reason3 As String,  _
                    ByVal Reason4 As String,  _
                    ByVal Reason5 As String,  _
                    ByVal BatchNumber As String) As IMPSInformationRow
            Dim rowIMPSInformationRow As IMPSInformationRow = CType(Me.NewRow,IMPSInformationRow)
            Dim columnValuesArray() As Object = New Object() {CaseNumber, DateEntered, IssType, IndCode, PayTypeCode, WarrantNumber, IssDate, CheckAmt, LastName, FirstName, Int1, PaymentToCase, VendorName, ExtraName, Street, CityState, ZipCode, ProvCode, SSNFedID, EAInd, SSNFedIDName, Supvr, WorkerNumber, MunicipalityCode, VoucherNumber, Dropped, Reason, Reason2, Reason3, Reason4, Reason5, BatchNumber}
            rowIMPSInformationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPSInformationRow)
            Return rowIMPSInformationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPSInformationDataTable = CType(MyBase.Clone,IMPSInformationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPSInformationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCaseNumber = MyBase.Columns("CaseNumber")
            Me.columnDateEntered = MyBase.Columns("DateEntered")
            Me.columnIssType = MyBase.Columns("IssType")
            Me.columnIndCode = MyBase.Columns("IndCode")
            Me.columnPayTypeCode = MyBase.Columns("PayTypeCode")
            Me.columnWarrantNumber = MyBase.Columns("WarrantNumber")
            Me.columnIssDate = MyBase.Columns("IssDate")
            Me.columnCheckAmt = MyBase.Columns("CheckAmt")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnInt1 = MyBase.Columns("Int1")
            Me.columnPaymentToCase = MyBase.Columns("PaymentToCase")
            Me.columnVendorName = MyBase.Columns("VendorName")
            Me.columnExtraName = MyBase.Columns("ExtraName")
            Me.columnStreet = MyBase.Columns("Street")
            Me.columnCityState = MyBase.Columns("CityState")
            Me.columnZipCode = MyBase.Columns("ZipCode")
            Me.columnProvCode = MyBase.Columns("ProvCode")
            Me.columnSSNFedID = MyBase.Columns("SSNFedID")
            Me.columnEAInd = MyBase.Columns("EAInd")
            Me.columnSSNFedIDName = MyBase.Columns("SSNFedIDName")
            Me.columnSupvr = MyBase.Columns("Supvr")
            Me.columnWorkerNumber = MyBase.Columns("WorkerNumber")
            Me.columnMunicipalityCode = MyBase.Columns("MunicipalityCode")
            Me.columnVoucherNumber = MyBase.Columns("VoucherNumber")
            Me.columnDropped = MyBase.Columns("Dropped")
            Me.columnReason = MyBase.Columns("Reason")
            Me.columnReason2 = MyBase.Columns("Reason2")
            Me.columnReason3 = MyBase.Columns("Reason3")
            Me.columnReason4 = MyBase.Columns("Reason4")
            Me.columnReason5 = MyBase.Columns("Reason5")
            Me.columnBatchNumber = MyBase.Columns("BatchNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCaseNumber = New Global.System.Data.DataColumn("CaseNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaseNumber)
            Me.columnDateEntered = New Global.System.Data.DataColumn("DateEntered", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEntered)
            Me.columnIssType = New Global.System.Data.DataColumn("IssType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssType)
            Me.columnIndCode = New Global.System.Data.DataColumn("IndCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndCode)
            Me.columnPayTypeCode = New Global.System.Data.DataColumn("PayTypeCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayTypeCode)
            Me.columnWarrantNumber = New Global.System.Data.DataColumn("WarrantNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarrantNumber)
            Me.columnIssDate = New Global.System.Data.DataColumn("IssDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssDate)
            Me.columnCheckAmt = New Global.System.Data.DataColumn("CheckAmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckAmt)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnInt1 = New Global.System.Data.DataColumn("Int1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInt1)
            Me.columnPaymentToCase = New Global.System.Data.DataColumn("PaymentToCase", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentToCase)
            Me.columnVendorName = New Global.System.Data.DataColumn("VendorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorName)
            Me.columnExtraName = New Global.System.Data.DataColumn("ExtraName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtraName)
            Me.columnStreet = New Global.System.Data.DataColumn("Street", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStreet)
            Me.columnCityState = New Global.System.Data.DataColumn("CityState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCityState)
            Me.columnZipCode = New Global.System.Data.DataColumn("ZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZipCode)
            Me.columnProvCode = New Global.System.Data.DataColumn("ProvCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvCode)
            Me.columnSSNFedID = New Global.System.Data.DataColumn("SSNFedID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSNFedID)
            Me.columnEAInd = New Global.System.Data.DataColumn("EAInd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEAInd)
            Me.columnSSNFedIDName = New Global.System.Data.DataColumn("SSNFedIDName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSNFedIDName)
            Me.columnSupvr = New Global.System.Data.DataColumn("Supvr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupvr)
            Me.columnWorkerNumber = New Global.System.Data.DataColumn("WorkerNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkerNumber)
            Me.columnMunicipalityCode = New Global.System.Data.DataColumn("MunicipalityCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunicipalityCode)
            Me.columnVoucherNumber = New Global.System.Data.DataColumn("VoucherNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherNumber)
            Me.columnDropped = New Global.System.Data.DataColumn("Dropped", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDropped)
            Me.columnReason = New Global.System.Data.DataColumn("Reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason)
            Me.columnReason2 = New Global.System.Data.DataColumn("Reason2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason2)
            Me.columnReason3 = New Global.System.Data.DataColumn("Reason3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason3)
            Me.columnReason4 = New Global.System.Data.DataColumn("Reason4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason4)
            Me.columnReason5 = New Global.System.Data.DataColumn("Reason5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason5)
            Me.columnBatchNumber = New Global.System.Data.DataColumn("BatchNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchNumber)
            Me.columnCaseNumber.MaxLength = 10
            Me.columnIssType.MaxLength = 1
            Me.columnIndCode.MaxLength = 1
            Me.columnPayTypeCode.MaxLength = 2
            Me.columnWarrantNumber.MaxLength = 6
            Me.columnIssDate.MaxLength = 8
            Me.columnCheckAmt.MaxLength = 6
            Me.columnLastName.MaxLength = 12
            Me.columnFirstName.MaxLength = 9
            Me.columnInt1.MaxLength = 1
            Me.columnPaymentToCase.MaxLength = 1
            Me.columnVendorName.MaxLength = 24
            Me.columnExtraName.MaxLength = 24
            Me.columnStreet.MaxLength = 20
            Me.columnCityState.MaxLength = 20
            Me.columnZipCode.MaxLength = 9
            Me.columnProvCode.MaxLength = 6
            Me.columnSSNFedID.MaxLength = 9
            Me.columnEAInd.MaxLength = 1
            Me.columnSSNFedIDName.MaxLength = 21
            Me.columnSupvr.MaxLength = 2
            Me.columnWorkerNumber.MaxLength = 2
            Me.columnMunicipalityCode.MaxLength = 2
            Me.columnVoucherNumber.MaxLength = 6
            Me.columnDropped.MaxLength = 10
            Me.columnReason.MaxLength = 50
            Me.columnReason2.MaxLength = 50
            Me.columnReason3.MaxLength = 50
            Me.columnReason4.MaxLength = 50
            Me.columnReason5.MaxLength = 50
            Me.columnBatchNumber.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPSInformationRow() As IMPSInformationRow
            Return CType(Me.NewRow,IMPSInformationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPSInformationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPSInformationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPSInformationRowChangedEvent) Is Nothing) Then
                RaiseEvent IMPSInformationRowChanged(Me, New IMPSInformationRowChangeEvent(CType(e.Row,IMPSInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPSInformationRowChangingEvent) Is Nothing) Then
                RaiseEvent IMPSInformationRowChanging(Me, New IMPSInformationRowChangeEvent(CType(e.Row,IMPSInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPSInformationRowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPSInformationRowDeleted(Me, New IMPSInformationRowChangeEvent(CType(e.Row,IMPSInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPSInformationRowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPSInformationRowDeleting(Me, New IMPSInformationRowChangeEvent(CType(e.Row,IMPSInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPSInformationRow(ByVal row As IMPSInformationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PhoenixCaseDataDataSet = New PhoenixCaseDataDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPSInformationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FAMISCaseInformationDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCaseNumber As Global.System.Data.DataColumn
        
        Private columnAA As Global.System.Data.DataColumn
        
        Private columnAB As Global.System.Data.DataColumn
        
        Private columnAC As Global.System.Data.DataColumn
        
        Private columnAD As Global.System.Data.DataColumn
        
        Private columnAE As Global.System.Data.DataColumn
        
        Private columnAF As Global.System.Data.DataColumn
        
        Private columnAG As Global.System.Data.DataColumn
        
        Private columnAH As Global.System.Data.DataColumn
        
        Private columnAI As Global.System.Data.DataColumn
        
        Private columnAJ As Global.System.Data.DataColumn
        
        Private columnAK As Global.System.Data.DataColumn
        
        Private columnAL As Global.System.Data.DataColumn
        
        Private columnAM As Global.System.Data.DataColumn
        
        Private columnAN As Global.System.Data.DataColumn
        
        Private columnDATEENTERED As Global.System.Data.DataColumn
        
        Private columnP03 As Global.System.Data.DataColumn
        
        Private columnP05 As Global.System.Data.DataColumn
        
        Private columnOPERATOR As Global.System.Data.DataColumn
        
        Private columnP09 As Global.System.Data.DataColumn
        
        Private columnBATCHNUMBER As Global.System.Data.DataColumn
        
        Private columnP10 As Global.System.Data.DataColumn
        
        Private columnWW As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FAMISCaseInformation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaseNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaseNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEENTEREDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEENTERED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCHNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FAMISCaseInformationRow
            Get
                Return CType(Me.Rows(index),FAMISCaseInformationRow)
            End Get
        End Property
        
        Public Event FAMISCaseInformationRowChanging As FAMISCaseInformationRowChangeEventHandler
        
        Public Event FAMISCaseInformationRowChanged As FAMISCaseInformationRowChangeEventHandler
        
        Public Event FAMISCaseInformationRowDeleting As FAMISCaseInformationRowChangeEventHandler
        
        Public Event FAMISCaseInformationRowDeleted As FAMISCaseInformationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFAMISCaseInformationRow(ByVal row As FAMISCaseInformationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFAMISCaseInformationRow( _
                    ByVal CaseNumber As String,  _
                    ByVal AA As String,  _
                    ByVal AB As String,  _
                    ByVal AC As String,  _
                    ByVal AD As String,  _
                    ByVal AE As String,  _
                    ByVal AF As String,  _
                    ByVal AG As String,  _
                    ByVal AH As String,  _
                    ByVal AI As String,  _
                    ByVal AJ As String,  _
                    ByVal AK As String,  _
                    ByVal AL As String,  _
                    ByVal AM As String,  _
                    ByVal AN As String,  _
                    ByVal DATEENTERED As Date,  _
                    ByVal P03 As String,  _
                    ByVal P05 As String,  _
                    ByVal _OPERATOR As String,  _
                    ByVal P09 As String,  _
                    ByVal BATCHNUMBER As String,  _
                    ByVal P10 As String,  _
                    ByVal WW As String) As FAMISCaseInformationRow
            Dim rowFAMISCaseInformationRow As FAMISCaseInformationRow = CType(Me.NewRow,FAMISCaseInformationRow)
            Dim columnValuesArray() As Object = New Object() {CaseNumber, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, DATEENTERED, P03, P05, _OPERATOR, P09, BATCHNUMBER, P10, WW}
            rowFAMISCaseInformationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFAMISCaseInformationRow)
            Return rowFAMISCaseInformationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FAMISCaseInformationDataTable = CType(MyBase.Clone,FAMISCaseInformationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FAMISCaseInformationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCaseNumber = MyBase.Columns("CaseNumber")
            Me.columnAA = MyBase.Columns("AA")
            Me.columnAB = MyBase.Columns("AB")
            Me.columnAC = MyBase.Columns("AC")
            Me.columnAD = MyBase.Columns("AD")
            Me.columnAE = MyBase.Columns("AE")
            Me.columnAF = MyBase.Columns("AF")
            Me.columnAG = MyBase.Columns("AG")
            Me.columnAH = MyBase.Columns("AH")
            Me.columnAI = MyBase.Columns("AI")
            Me.columnAJ = MyBase.Columns("AJ")
            Me.columnAK = MyBase.Columns("AK")
            Me.columnAL = MyBase.Columns("AL")
            Me.columnAM = MyBase.Columns("AM")
            Me.columnAN = MyBase.Columns("AN")
            Me.columnDATEENTERED = MyBase.Columns("DATEENTERED")
            Me.columnP03 = MyBase.Columns("P03")
            Me.columnP05 = MyBase.Columns("P05")
            Me.columnOPERATOR = MyBase.Columns("OPERATOR")
            Me.columnP09 = MyBase.Columns("P09")
            Me.columnBATCHNUMBER = MyBase.Columns("BATCHNUMBER")
            Me.columnP10 = MyBase.Columns("P10")
            Me.columnWW = MyBase.Columns("WW")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCaseNumber = New Global.System.Data.DataColumn("CaseNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaseNumber)
            Me.columnAA = New Global.System.Data.DataColumn("AA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAA)
            Me.columnAB = New Global.System.Data.DataColumn("AB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAB)
            Me.columnAC = New Global.System.Data.DataColumn("AC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAC)
            Me.columnAD = New Global.System.Data.DataColumn("AD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAD)
            Me.columnAE = New Global.System.Data.DataColumn("AE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAE)
            Me.columnAF = New Global.System.Data.DataColumn("AF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAF)
            Me.columnAG = New Global.System.Data.DataColumn("AG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAG)
            Me.columnAH = New Global.System.Data.DataColumn("AH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAH)
            Me.columnAI = New Global.System.Data.DataColumn("AI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAI)
            Me.columnAJ = New Global.System.Data.DataColumn("AJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAJ)
            Me.columnAK = New Global.System.Data.DataColumn("AK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAK)
            Me.columnAL = New Global.System.Data.DataColumn("AL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAL)
            Me.columnAM = New Global.System.Data.DataColumn("AM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM)
            Me.columnAN = New Global.System.Data.DataColumn("AN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAN)
            Me.columnDATEENTERED = New Global.System.Data.DataColumn("DATEENTERED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEENTERED)
            Me.columnP03 = New Global.System.Data.DataColumn("P03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP03)
            Me.columnP05 = New Global.System.Data.DataColumn("P05", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP05)
            Me.columnOPERATOR = New Global.System.Data.DataColumn("OPERATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnOPERATOR.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OPERATORColumn")
            Me.columnOPERATOR.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOPERATOR")
            Me.columnOPERATOR.ExtendedProperties.Add("Generator_UserColumnName", "OPERATOR")
            MyBase.Columns.Add(Me.columnOPERATOR)
            Me.columnP09 = New Global.System.Data.DataColumn("P09", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP09)
            Me.columnBATCHNUMBER = New Global.System.Data.DataColumn("BATCHNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCHNUMBER)
            Me.columnP10 = New Global.System.Data.DataColumn("P10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP10)
            Me.columnWW = New Global.System.Data.DataColumn("WW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWW)
            Me.columnCaseNumber.MaxLength = 10
            Me.columnAA.MaxLength = 10
            Me.columnAB.MaxLength = 3
            Me.columnAC.MaxLength = 12
            Me.columnAD.MaxLength = 9
            Me.columnAE.MaxLength = 1
            Me.columnAF.MaxLength = 2
            Me.columnAG.MaxLength = 2
            Me.columnAH.MaxLength = 2
            Me.columnAI.MaxLength = 2
            Me.columnAJ.MaxLength = 1
            Me.columnAK.MaxLength = 10
            Me.columnAL.MaxLength = 7
            Me.columnAM.MaxLength = 7
            Me.columnAN.MaxLength = 10
            Me.columnP03.MaxLength = 1
            Me.columnP05.MaxLength = 1
            Me.columnOPERATOR.MaxLength = 6
            Me.columnP09.MaxLength = 1
            Me.columnBATCHNUMBER.MaxLength = 7
            Me.columnP10.MaxLength = 1
            Me.columnWW.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFAMISCaseInformationRow() As FAMISCaseInformationRow
            Return CType(Me.NewRow,FAMISCaseInformationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FAMISCaseInformationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FAMISCaseInformationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FAMISCaseInformationRowChangedEvent) Is Nothing) Then
                RaiseEvent FAMISCaseInformationRowChanged(Me, New FAMISCaseInformationRowChangeEvent(CType(e.Row,FAMISCaseInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FAMISCaseInformationRowChangingEvent) Is Nothing) Then
                RaiseEvent FAMISCaseInformationRowChanging(Me, New FAMISCaseInformationRowChangeEvent(CType(e.Row,FAMISCaseInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FAMISCaseInformationRowDeletedEvent) Is Nothing) Then
                RaiseEvent FAMISCaseInformationRowDeleted(Me, New FAMISCaseInformationRowChangeEvent(CType(e.Row,FAMISCaseInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FAMISCaseInformationRowDeletingEvent) Is Nothing) Then
                RaiseEvent FAMISCaseInformationRowDeleting(Me, New FAMISCaseInformationRowChangeEvent(CType(e.Row,FAMISCaseInformationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFAMISCaseInformationRow(ByVal row As FAMISCaseInformationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PhoenixCaseDataDataSet = New PhoenixCaseDataDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FAMISCaseInformationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TransactionLogDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCaseNumber As Global.System.Data.DataColumn
        
        Private columnTextFile As Global.System.Data.DataColumn
        
        Private columnDateEntered As Global.System.Data.DataColumn
        
        Private columnOperator As Global.System.Data.DataColumn
        
        Private columnOps As Global.System.Data.DataColumn
        
        Private columnPersonNumber As Global.System.Data.DataColumn
        
        Private columnResult As Global.System.Data.DataColumn
        
        Private columnReason As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TransactionLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaseNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaseNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TextFileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTextFile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEnteredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEntered
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOps
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PersonNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPersonNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransactionLogRow
            Get
                Return CType(Me.Rows(index),TransactionLogRow)
            End Get
        End Property
        
        Public Event TransactionLogRowChanging As TransactionLogRowChangeEventHandler
        
        Public Event TransactionLogRowChanged As TransactionLogRowChangeEventHandler
        
        Public Event TransactionLogRowDeleting As TransactionLogRowChangeEventHandler
        
        Public Event TransactionLogRowDeleted As TransactionLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTransactionLogRow(ByVal row As TransactionLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTransactionLogRow(ByVal CaseNumber As String, ByVal TextFile As String, ByVal DateEntered As Date, ByVal _Operator As String, ByVal Ops As String, ByVal PersonNumber As String, ByVal Result As String, ByVal Reason As String) As TransactionLogRow
            Dim rowTransactionLogRow As TransactionLogRow = CType(Me.NewRow,TransactionLogRow)
            Dim columnValuesArray() As Object = New Object() {CaseNumber, TextFile, DateEntered, _Operator, Ops, PersonNumber, Result, Reason}
            rowTransactionLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTransactionLogRow)
            Return rowTransactionLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TransactionLogDataTable = CType(MyBase.Clone,TransactionLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TransactionLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCaseNumber = MyBase.Columns("CaseNumber")
            Me.columnTextFile = MyBase.Columns("TextFile")
            Me.columnDateEntered = MyBase.Columns("DateEntered")
            Me.columnOperator = MyBase.Columns("Operator")
            Me.columnOps = MyBase.Columns("Ops")
            Me.columnPersonNumber = MyBase.Columns("PersonNumber")
            Me.columnResult = MyBase.Columns("Result")
            Me.columnReason = MyBase.Columns("Reason")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCaseNumber = New Global.System.Data.DataColumn("CaseNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaseNumber)
            Me.columnTextFile = New Global.System.Data.DataColumn("TextFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTextFile)
            Me.columnDateEntered = New Global.System.Data.DataColumn("DateEntered", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEntered)
            Me.columnOperator = New Global.System.Data.DataColumn("Operator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OperatorColumn")
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOperator")
            Me.columnOperator.ExtendedProperties.Add("Generator_UserColumnName", "Operator")
            MyBase.Columns.Add(Me.columnOperator)
            Me.columnOps = New Global.System.Data.DataColumn("Ops", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOps)
            Me.columnPersonNumber = New Global.System.Data.DataColumn("PersonNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPersonNumber)
            Me.columnResult = New Global.System.Data.DataColumn("Result", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResult)
            Me.columnReason = New Global.System.Data.DataColumn("Reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReason)
            Me.columnCaseNumber.MaxLength = 10
            Me.columnTextFile.MaxLength = 75
            Me.columnOperator.MaxLength = 10
            Me.columnOps.MaxLength = 10
            Me.columnPersonNumber.MaxLength = 10
            Me.columnResult.MaxLength = 10
            Me.columnReason.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTransactionLogRow() As TransactionLogRow
            Return CType(Me.NewRow,TransactionLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TransactionLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TransactionLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransactionLogRowChangedEvent) Is Nothing) Then
                RaiseEvent TransactionLogRowChanged(Me, New TransactionLogRowChangeEvent(CType(e.Row,TransactionLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransactionLogRowChangingEvent) Is Nothing) Then
                RaiseEvent TransactionLogRowChanging(Me, New TransactionLogRowChangeEvent(CType(e.Row,TransactionLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransactionLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransactionLogRowDeleted(Me, New TransactionLogRowChangeEvent(CType(e.Row,TransactionLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransactionLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransactionLogRowDeleting(Me, New TransactionLogRowChangeEvent(CType(e.Row,TransactionLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTransactionLogRow(ByVal row As TransactionLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PhoenixCaseDataDataSet = New PhoenixCaseDataDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TransactionLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPSInformationRow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPSInformation As IMPSInformationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPSInformation = CType(Me.Table,IMPSInformationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaseNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.CaseNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaseNumber' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.CaseNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEntered() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.DateEnteredColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEntered' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.DateEnteredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssType() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.IssTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssType' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.IssTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.IndCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IndCode' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.IndCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayTypeCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.PayTypeCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayTypeCode' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.PayTypeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WarrantNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.WarrantNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WarrantNumber' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.WarrantNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.IssDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssDate' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.IssDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckAmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.CheckAmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckAmt' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.CheckAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Int1() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.Int1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Int1' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.Int1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentToCase() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.PaymentToCaseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentToCase' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.PaymentToCaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.VendorNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorName' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.VendorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExtraName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.ExtraNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExtraName' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.ExtraNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Street() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.StreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Street' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.StreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CityState() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.CityStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CityState' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.CityStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZipCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.ZipCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZipCode' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.ZipCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.ProvCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProvCode' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.ProvCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSNFedID() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.SSNFedIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSNFedID' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.SSNFedIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EAInd() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.EAIndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EAInd' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.EAIndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSNFedIDName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.SSNFedIDNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSNFedIDName' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.SSNFedIDNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supvr() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.SupvrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supvr' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.SupvrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkerNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.WorkerNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkerNumber' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.WorkerNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipalityCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.MunicipalityCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MunicipalityCode' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.MunicipalityCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.VoucherNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VoucherNumber' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.VoucherNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dropped() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.DroppedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dropped' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.DroppedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.ReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.ReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason2() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.Reason2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason2' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.Reason2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason3() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.Reason3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason3' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.Reason3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason4() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.Reason4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason4' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.Reason4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason5() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.Reason5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason5' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.Reason5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPSInformation.BatchNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BatchNumber' in table 'IMPSInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPSInformation.BatchNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaseNumberNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.CaseNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaseNumberNull()
            Me(Me.tableIMPSInformation.CaseNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEnteredNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.DateEnteredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEnteredNull()
            Me(Me.tableIMPSInformation.DateEnteredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssTypeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.IssTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssTypeNull()
            Me(Me.tableIMPSInformation.IssTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndCodeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.IndCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndCodeNull()
            Me(Me.tableIMPSInformation.IndCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.PayTypeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayTypeCodeNull()
            Me(Me.tableIMPSInformation.PayTypeCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarrantNumberNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.WarrantNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarrantNumberNull()
            Me(Me.tableIMPSInformation.WarrantNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssDateNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.IssDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssDateNull()
            Me(Me.tableIMPSInformation.IssDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckAmtNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.CheckAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckAmtNull()
            Me(Me.tableIMPSInformation.CheckAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableIMPSInformation.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableIMPSInformation.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInt1Null() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.Int1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInt1Null()
            Me(Me.tableIMPSInformation.Int1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentToCaseNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.PaymentToCaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentToCaseNull()
            Me(Me.tableIMPSInformation.PaymentToCaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorNameNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.VendorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorNameNull()
            Me(Me.tableIMPSInformation.VendorNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExtraNameNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.ExtraNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExtraNameNull()
            Me(Me.tableIMPSInformation.ExtraNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStreetNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.StreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStreetNull()
            Me(Me.tableIMPSInformation.StreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityStateNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.CityStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityStateNull()
            Me(Me.tableIMPSInformation.CityStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.ZipCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipCodeNull()
            Me(Me.tableIMPSInformation.ZipCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvCodeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.ProvCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvCodeNull()
            Me(Me.tableIMPSInformation.ProvCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSSNFedIDNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.SSNFedIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSSNFedIDNull()
            Me(Me.tableIMPSInformation.SSNFedIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEAIndNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.EAIndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEAIndNull()
            Me(Me.tableIMPSInformation.EAIndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSSNFedIDNameNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.SSNFedIDNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSSNFedIDNameNull()
            Me(Me.tableIMPSInformation.SSNFedIDNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupvrNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.SupvrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupvrNull()
            Me(Me.tableIMPSInformation.SupvrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkerNumberNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.WorkerNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkerNumberNull()
            Me(Me.tableIMPSInformation.WorkerNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMunicipalityCodeNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.MunicipalityCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMunicipalityCodeNull()
            Me(Me.tableIMPSInformation.MunicipalityCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoucherNumberNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.VoucherNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoucherNumberNull()
            Me(Me.tableIMPSInformation.VoucherNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDroppedNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.DroppedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDroppedNull()
            Me(Me.tableIMPSInformation.DroppedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.ReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonNull()
            Me(Me.tableIMPSInformation.ReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReason2Null() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.Reason2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReason2Null()
            Me(Me.tableIMPSInformation.Reason2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReason3Null() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.Reason3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReason3Null()
            Me(Me.tableIMPSInformation.Reason3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReason4Null() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.Reason4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReason4Null()
            Me(Me.tableIMPSInformation.Reason4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReason5Null() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.Reason5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReason5Null()
            Me(Me.tableIMPSInformation.Reason5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchNumberNull() As Boolean
            Return Me.IsNull(Me.tableIMPSInformation.BatchNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchNumberNull()
            Me(Me.tableIMPSInformation.BatchNumberColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FAMISCaseInformationRow
        Inherits Global.System.Data.DataRow
        
        Private tableFAMISCaseInformation As FAMISCaseInformationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFAMISCaseInformation = CType(Me.Table,FAMISCaseInformationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaseNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.CaseNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaseNumber' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.CaseNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AA' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.ABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AB' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.ABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AC() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.ACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AC' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.ACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AD() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.ADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AD' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.ADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AE' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AF() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AF' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AG() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AG' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AH() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AH' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AI() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AI' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AJ' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AK' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.ALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AL' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.ALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AM() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.AMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AM' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.AMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AN() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.ANColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AN' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.ANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEENTERED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.DATEENTEREDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEENTERED' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.DATEENTEREDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P03() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.P03Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P03' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.P03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P05() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.P05Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P05' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.P05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _OPERATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.OPERATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPERATOR' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.OPERATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P09() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.P09Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P09' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.P09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCHNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.BATCHNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCHNUMBER' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.BATCHNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P10() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.P10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P10' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.P10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WW() As String
            Get
                Try 
                    Return CType(Me(Me.tableFAMISCaseInformation.WWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WW' in table 'FAMISCaseInformation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFAMISCaseInformation.WWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaseNumberNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.CaseNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaseNumberNull()
            Me(Me.tableFAMISCaseInformation.CaseNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAANull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAANull()
            Me(Me.tableFAMISCaseInformation.AAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsABNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.ABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetABNull()
            Me(Me.tableFAMISCaseInformation.ABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.ACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACNull()
            Me(Me.tableFAMISCaseInformation.ACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.ADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADNull()
            Me(Me.tableFAMISCaseInformation.ADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAENull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAENull()
            Me(Me.tableFAMISCaseInformation.AEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAFNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAFNull()
            Me(Me.tableFAMISCaseInformation.AFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGNull()
            Me(Me.tableFAMISCaseInformation.AGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAHNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAHNull()
            Me(Me.tableFAMISCaseInformation.AHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAINull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAINull()
            Me(Me.tableFAMISCaseInformation.AIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAJNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAJNull()
            Me(Me.tableFAMISCaseInformation.AJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAKNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAKNull()
            Me(Me.tableFAMISCaseInformation.AKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.ALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALNull()
            Me(Me.tableFAMISCaseInformation.ALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.AMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMNull()
            Me(Me.tableFAMISCaseInformation.AMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.ANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNull()
            Me(Me.tableFAMISCaseInformation.ANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEENTEREDNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.DATEENTEREDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEENTEREDNull()
            Me(Me.tableFAMISCaseInformation.DATEENTEREDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP03Null() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.P03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP03Null()
            Me(Me.tableFAMISCaseInformation.P03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP05Null() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.P05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP05Null()
            Me(Me.tableFAMISCaseInformation.P05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_OPERATORNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.OPERATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_OPERATORNull()
            Me(Me.tableFAMISCaseInformation.OPERATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP09Null() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.P09Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP09Null()
            Me(Me.tableFAMISCaseInformation.P09Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.BATCHNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHNUMBERNull()
            Me(Me.tableFAMISCaseInformation.BATCHNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP10Null() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.P10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP10Null()
            Me(Me.tableFAMISCaseInformation.P10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWWNull() As Boolean
            Return Me.IsNull(Me.tableFAMISCaseInformation.WWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWWNull()
            Me(Me.tableFAMISCaseInformation.WWColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TransactionLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableTransactionLog As TransactionLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransactionLog = CType(Me.Table,TransactionLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaseNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.CaseNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaseNumber' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.CaseNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TextFile() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.TextFileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TextFile' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.TextFileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEntered() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.DateEnteredColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEntered' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.DateEnteredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Operator() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.OperatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Operator' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.OperatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ops() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.OpsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ops' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.OpsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PersonNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.PersonNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PersonNumber' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.PersonNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Result() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.ResultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Result' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.ResultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reason() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionLog.ReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reason' in table 'TransactionLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionLog.ReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaseNumberNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.CaseNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaseNumberNull()
            Me(Me.tableTransactionLog.CaseNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTextFileNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.TextFileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTextFileNull()
            Me(Me.tableTransactionLog.TextFileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEnteredNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.DateEnteredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEnteredNull()
            Me(Me.tableTransactionLog.DateEnteredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_OperatorNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.OperatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_OperatorNull()
            Me(Me.tableTransactionLog.OperatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpsNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.OpsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpsNull()
            Me(Me.tableTransactionLog.OpsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPersonNumberNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.PersonNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPersonNumberNull()
            Me(Me.tableTransactionLog.PersonNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResultNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.ResultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResultNull()
            Me(Me.tableTransactionLog.ResultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonNull() As Boolean
            Return Me.IsNull(Me.tableTransactionLog.ReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonNull()
            Me(Me.tableTransactionLog.ReasonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPSInformationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPSInformationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPSInformationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPSInformationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FAMISCaseInformationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FAMISCaseInformationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FAMISCaseInformationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FAMISCaseInformationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TransactionLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TransactionLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TransactionLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TransactionLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PhoenixCaseDataDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IMPSInformationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IMPSInformation"
            tableMapping.ColumnMappings.Add("CaseNumber", "CaseNumber")
            tableMapping.ColumnMappings.Add("DateEntered", "DateEntered")
            tableMapping.ColumnMappings.Add("IssType", "IssType")
            tableMapping.ColumnMappings.Add("IndCode", "IndCode")
            tableMapping.ColumnMappings.Add("PayTypeCode", "PayTypeCode")
            tableMapping.ColumnMappings.Add("WarrantNumber", "WarrantNumber")
            tableMapping.ColumnMappings.Add("IssDate", "IssDate")
            tableMapping.ColumnMappings.Add("CheckAmt", "CheckAmt")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("Int1", "Int1")
            tableMapping.ColumnMappings.Add("PaymentToCase", "PaymentToCase")
            tableMapping.ColumnMappings.Add("VendorName", "VendorName")
            tableMapping.ColumnMappings.Add("ExtraName", "ExtraName")
            tableMapping.ColumnMappings.Add("Street", "Street")
            tableMapping.ColumnMappings.Add("CityState", "CityState")
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode")
            tableMapping.ColumnMappings.Add("ProvCode", "ProvCode")
            tableMapping.ColumnMappings.Add("SSNFedID", "SSNFedID")
            tableMapping.ColumnMappings.Add("EAInd", "EAInd")
            tableMapping.ColumnMappings.Add("SSNFedIDName", "SSNFedIDName")
            tableMapping.ColumnMappings.Add("Supvr", "Supvr")
            tableMapping.ColumnMappings.Add("WorkerNumber", "WorkerNumber")
            tableMapping.ColumnMappings.Add("MunicipalityCode", "MunicipalityCode")
            tableMapping.ColumnMappings.Add("VoucherNumber", "VoucherNumber")
            tableMapping.ColumnMappings.Add("Dropped", "Dropped")
            tableMapping.ColumnMappings.Add("Reason", "Reason")
            tableMapping.ColumnMappings.Add("Reason2", "Reason2")
            tableMapping.ColumnMappings.Add("Reason3", "Reason3")
            tableMapping.ColumnMappings.Add("Reason4", "Reason4")
            tableMapping.ColumnMappings.Add("Reason5", "Reason5")
            tableMapping.ColumnMappings.Add("BatchNumber", "BatchNumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IMPSInformation] ([CaseNumber], [DateEntered], [IssType], [Ind"& _ 
                "Code], [PayTypeCode], [WarrantNumber], [IssDate], [CheckAmt], [LastName], [First"& _ 
                "Name], [Int1], [PaymentToCase], [VendorName], [ExtraName], [Street], [CityState]"& _ 
                ", [ZipCode], [ProvCode], [SSNFedID], [EAInd], [SSNFedIDName], [Supvr], [WorkerNu"& _ 
                "mber], [MunicipalityCode], [VoucherNumber], [Dropped], [Reason], [Reason2], [Rea"& _ 
                "son3], [Reason4], [Reason5], [BatchNumber]) VALUES (@CaseNumber, @DateEntered, @"& _ 
                "IssType, @IndCode, @PayTypeCode, @WarrantNumber, @IssDate, @CheckAmt, @LastName,"& _ 
                " @FirstName, @Int1, @PaymentToCase, @VendorName, @ExtraName, @Street, @CityState"& _ 
                ", @ZipCode, @ProvCode, @SSNFedID, @EAInd, @SSNFedIDName, @Supvr, @WorkerNumber, "& _ 
                "@MunicipalityCode, @VoucherNumber, @Dropped, @Reason, @Reason2, @Reason3, @Reaso"& _ 
                "n4, @Reason5, @BatchNumber)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaseNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaseNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEntered", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEntered", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IssType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IndCode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IndCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PayTypeCode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PayTypeCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WarrantNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WarrantNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IssDate", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CheckAmt", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CheckAmt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Int1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Int1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PaymentToCase", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PaymentToCase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VendorName", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExtraName", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExtraName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Street", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Street", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CityState", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CityState", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ZipCode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ZipCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProvCode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProvCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SSNFedID", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SSNFedID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EAInd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EAInd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SSNFedIDName", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SSNFedIDName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supvr", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supvr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkerNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MunicipalityCode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MunicipalityCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dropped", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dropped", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BatchNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Phoenix___Server.My.MySettings.Default.PhoenixCaseDataConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CaseNumber, DateEntered, IssType, IndCode, PayTypeCode, WarrantNumber, Iss"& _ 
                "Date, CheckAmt, LastName, FirstName, Int1, PaymentToCase, VendorName, ExtraName,"& _ 
                " Street, CityState, ZipCode, ProvCode, SSNFedID, EAInd, SSNFedIDName, Supvr, Wor"& _ 
                "kerNumber, MunicipalityCode, VoucherNumber, Dropped, Reason, Reason2, Reason3, R"& _ 
                "eason4, Reason5, BatchNumber FROM dbo.IMPSInformation"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CaseNumber, DateEntered, IssType, IndCode, PayTypeCode, WarrantNumber, Iss"& _ 
                "Date, CheckAmt, LastName, FirstName, Int1, PaymentToCase, VendorName, ExtraName,"& _ 
                " Street, CityState, ZipCode, ProvCode, SSNFedID, EAInd, SSNFedIDName, Supvr, Wor"& _ 
                "kerNumber, MunicipalityCode, VoucherNumber, Dropped, Reason, Reason2, Reason3, R"& _ 
                "eason4, Reason5, BatchNumber FROM dbo.IMPSInformation where dateentered = @DateC"& _ 
                "hoice ORDER BY CASENUMBER"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateChoice", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEntered", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PhoenixCaseDataDataSet.IMPSInformationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PhoenixCaseDataDataSet.IMPSInformationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PhoenixCaseDataDataSet.IMPSInformationDataTable = New PhoenixCaseDataDataSet.IMPSInformationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As PhoenixCaseDataDataSet.IMPSInformationDataTable, ByVal DateChoice As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateChoice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateChoice.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal DateChoice As Global.System.Nullable(Of Date)) As PhoenixCaseDataDataSet.IMPSInformationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateChoice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateChoice.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As PhoenixCaseDataDataSet.IMPSInformationDataTable = New PhoenixCaseDataDataSet.IMPSInformationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As PhoenixCaseDataDataSet.IMPSInformationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As PhoenixCaseDataDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "IMPSInformation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CaseNumber As String,  _
                    ByVal DateEntered As Global.System.Nullable(Of Date),  _
                    ByVal IssType As String,  _
                    ByVal IndCode As String,  _
                    ByVal PayTypeCode As String,  _
                    ByVal WarrantNumber As String,  _
                    ByVal IssDate As String,  _
                    ByVal CheckAmt As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Int1 As String,  _
                    ByVal PaymentToCase As String,  _
                    ByVal VendorName As String,  _
                    ByVal ExtraName As String,  _
                    ByVal Street As String,  _
                    ByVal CityState As String,  _
                    ByVal ZipCode As String,  _
                    ByVal ProvCode As String,  _
                    ByVal SSNFedID As String,  _
                    ByVal EAInd As String,  _
                    ByVal SSNFedIDName As String,  _
                    ByVal Supvr As String,  _
                    ByVal WorkerNumber As String,  _
                    ByVal MunicipalityCode As String,  _
                    ByVal VoucherNumber As String,  _
                    ByVal Dropped As String,  _
                    ByVal Reason As String,  _
                    ByVal Reason2 As String,  _
                    ByVal Reason3 As String,  _
                    ByVal Reason4 As String,  _
                    ByVal Reason5 As String,  _
                    ByVal BatchNumber As String) As Integer
            If (CaseNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CaseNumber,String)
            End If
            If (DateEntered.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateEntered.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IssType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IssType,String)
            End If
            If (IndCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IndCode,String)
            End If
            If (PayTypeCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PayTypeCode,String)
            End If
            If (WarrantNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(WarrantNumber,String)
            End If
            If (IssDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IssDate,String)
            End If
            If (CheckAmt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CheckAmt,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LastName,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FirstName,String)
            End If
            If (Int1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Int1,String)
            End If
            If (PaymentToCase Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PaymentToCase,String)
            End If
            If (VendorName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(VendorName,String)
            End If
            If (ExtraName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ExtraName,String)
            End If
            If (Street Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Street,String)
            End If
            If (CityState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CityState,String)
            End If
            If (ZipCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ZipCode,String)
            End If
            If (ProvCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ProvCode,String)
            End If
            If (SSNFedID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SSNFedID,String)
            End If
            If (EAInd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EAInd,String)
            End If
            If (SSNFedIDName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SSNFedIDName,String)
            End If
            If (Supvr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Supvr,String)
            End If
            If (WorkerNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(WorkerNumber,String)
            End If
            If (MunicipalityCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MunicipalityCode,String)
            End If
            If (VoucherNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(VoucherNumber,String)
            End If
            If (Dropped Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Dropped,String)
            End If
            If (Reason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Reason,String)
            End If
            If (Reason2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Reason2,String)
            End If
            If (Reason3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Reason3,String)
            End If
            If (Reason4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Reason4,String)
            End If
            If (Reason5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Reason5,String)
            End If
            If (BatchNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(BatchNumber,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FAMISCaseInformationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FAMISCaseInformation"
            tableMapping.ColumnMappings.Add("CaseNumber", "CaseNumber")
            tableMapping.ColumnMappings.Add("AA", "AA")
            tableMapping.ColumnMappings.Add("AB", "AB")
            tableMapping.ColumnMappings.Add("AC", "AC")
            tableMapping.ColumnMappings.Add("AD", "AD")
            tableMapping.ColumnMappings.Add("AE", "AE")
            tableMapping.ColumnMappings.Add("AF", "AF")
            tableMapping.ColumnMappings.Add("AG", "AG")
            tableMapping.ColumnMappings.Add("AH", "AH")
            tableMapping.ColumnMappings.Add("AI", "AI")
            tableMapping.ColumnMappings.Add("AJ", "AJ")
            tableMapping.ColumnMappings.Add("AK", "AK")
            tableMapping.ColumnMappings.Add("AL", "AL")
            tableMapping.ColumnMappings.Add("AM", "AM")
            tableMapping.ColumnMappings.Add("AN", "AN")
            tableMapping.ColumnMappings.Add("DATEENTERED", "DATEENTERED")
            tableMapping.ColumnMappings.Add("P03", "P03")
            tableMapping.ColumnMappings.Add("P05", "P05")
            tableMapping.ColumnMappings.Add("OPERATOR", "OPERATOR")
            tableMapping.ColumnMappings.Add("P09", "P09")
            tableMapping.ColumnMappings.Add("BATCHNUMBER", "BATCHNUMBER")
            tableMapping.ColumnMappings.Add("P10", "P10")
            tableMapping.ColumnMappings.Add("WW", "WW")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FAMISCaseInformation] ([CaseNumber], [AA], [AB], [AC], [AD], ["& _ 
                "AE], [AF], [AG], [AH], [AI], [AJ], [AK], [AL], [AM], [AN], [DATEENTERED], [P03],"& _ 
                " [P05], [OPERATOR], [P09], [BATCHNUMBER], [P10], [WW]) VALUES (@CaseNumber, @AA,"& _ 
                " @AB, @AC, @AD, @AE, @AF, @AG, @AH, @AI, @AJ, @AK, @AL, @AM, @AN, @DATEENTERED, "& _ 
                "@P03, @P05, @OPERATOR, @P09, @BATCHNUMBER, @P10, @WW)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaseNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaseNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AA", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AB", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AC", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AD", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AF", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AH", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AI", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AJ", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AN", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATEENTERED", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEENTERED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@P03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "P03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@P05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "P05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPERATOR", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@P09", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "P09", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCHNUMBER", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCHNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@P10", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "P10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WW", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Phoenix___Server.My.MySettings.Default.PhoenixCaseDataConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CaseNumber, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, DATEEN"& _ 
                "TERED, P03, P05, OPERATOR, P09, BATCHNUMBER, P10, WW FROM dbo.FAMISCaseInformati"& _ 
                "on"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CaseNumber, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, DATEEN"& _ 
                "TERED, P03, P05, OPERATOR, P09, BATCHNUMBER, P10, WW FROM dbo.FAMISCaseInformati"& _ 
                "on Where Dateentered = @Dateentered ORDER BY OPERATOR, BATCHNUMBER"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dateentered", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEENTERED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable = New PhoenixCaseDataDataSet.FAMISCaseInformationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable, ByVal Dateentered As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Dateentered.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Dateentered.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal Dateentered As Global.System.Nullable(Of Date)) As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Dateentered.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Dateentered.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable = New PhoenixCaseDataDataSet.FAMISCaseInformationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As PhoenixCaseDataDataSet.FAMISCaseInformationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As PhoenixCaseDataDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FAMISCaseInformation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CaseNumber As String,  _
                    ByVal AA As String,  _
                    ByVal AB As String,  _
                    ByVal AC As String,  _
                    ByVal AD As String,  _
                    ByVal AE As String,  _
                    ByVal AF As String,  _
                    ByVal AG As String,  _
                    ByVal AH As String,  _
                    ByVal AI As String,  _
                    ByVal AJ As String,  _
                    ByVal AK As String,  _
                    ByVal AL As String,  _
                    ByVal AM As String,  _
                    ByVal AN As String,  _
                    ByVal DATEENTERED As Global.System.Nullable(Of Date),  _
                    ByVal P03 As String,  _
                    ByVal P05 As String,  _
                    ByVal _OPERATOR As String,  _
                    ByVal P09 As String,  _
                    ByVal BATCHNUMBER As String,  _
                    ByVal P10 As String,  _
                    ByVal WW As String) As Integer
            If (CaseNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CaseNumber,String)
            End If
            If (AA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AA,String)
            End If
            If (AB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AB,String)
            End If
            If (AC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AC,String)
            End If
            If (AD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AD,String)
            End If
            If (AE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(AE,String)
            End If
            If (AF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(AF,String)
            End If
            If (AG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(AG,String)
            End If
            If (AH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(AH,String)
            End If
            If (AI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(AI,String)
            End If
            If (AJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AJ,String)
            End If
            If (AK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(AK,String)
            End If
            If (AL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AL,String)
            End If
            If (AM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(AM,String)
            End If
            If (AN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(AN,String)
            End If
            If (DATEENTERED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DATEENTERED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (P03 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(P03,String)
            End If
            If (P05 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(P05,String)
            End If
            If (_OPERATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(_OPERATOR,String)
            End If
            If (P09 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(P09,String)
            End If
            If (BATCHNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(BATCHNUMBER,String)
            End If
            If (P10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(P10,String)
            End If
            If (WW Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(WW,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TransactionLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TransactionLog"
            tableMapping.ColumnMappings.Add("CaseNumber", "CaseNumber")
            tableMapping.ColumnMappings.Add("TextFile", "TextFile")
            tableMapping.ColumnMappings.Add("DateEntered", "DateEntered")
            tableMapping.ColumnMappings.Add("Operator", "Operator")
            tableMapping.ColumnMappings.Add("Ops", "Ops")
            tableMapping.ColumnMappings.Add("PersonNumber", "PersonNumber")
            tableMapping.ColumnMappings.Add("Result", "Result")
            tableMapping.ColumnMappings.Add("Reason", "Reason")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TransactionLog] ([CaseNumber], [TextFile], [DateEntered], [Ope"& _ 
                "rator], [Ops], [PersonNumber], [Result], [Reason]) VALUES (@CaseNumber, @TextFil"& _ 
                "e, @DateEntered, @Operator, @Ops, @PersonNumber, @Result, @Reason)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaseNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaseNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TextFile", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TextFile", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEntered", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEntered", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Operator", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Operator", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ops", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ops", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PersonNumber", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PersonNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Result", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Result", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reason", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Phoenix___Server.My.MySettings.Default.PhoenixCaseDataConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CaseNumber, TextFile, DateEntered, Operator, Ops, PersonNumber, Result, Re"& _ 
                "ason FROM dbo.TransactionLog"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CaseNumber, TextFile, DateEntered, Operator, Ops, PersonNumber, Result, Re"& _ 
                "ason FROM dbo.TransactionLog WHERE DateEntered = @DateChoice"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateChoice", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEntered", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PhoenixCaseDataDataSet.TransactionLogDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PhoenixCaseDataDataSet.TransactionLogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PhoenixCaseDataDataSet.TransactionLogDataTable = New PhoenixCaseDataDataSet.TransactionLogDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As PhoenixCaseDataDataSet.TransactionLogDataTable, ByVal DateChoice As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateChoice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateChoice.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal DateChoice As Global.System.Nullable(Of Date)) As PhoenixCaseDataDataSet.TransactionLogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DateChoice.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DateChoice.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As PhoenixCaseDataDataSet.TransactionLogDataTable = New PhoenixCaseDataDataSet.TransactionLogDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As PhoenixCaseDataDataSet.TransactionLogDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As PhoenixCaseDataDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TransactionLog")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CaseNumber As String, ByVal TextFile As String, ByVal DateEntered As Global.System.Nullable(Of Date), ByVal _Operator As String, ByVal Ops As String, ByVal PersonNumber As String, ByVal Result As String, ByVal Reason As String) As Integer
            If (CaseNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CaseNumber,String)
            End If
            If (TextFile Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TextFile,String)
            End If
            If (DateEntered.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateEntered.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_Operator Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_Operator,String)
            End If
            If (Ops Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ops,String)
            End If
            If (PersonNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PersonNumber,String)
            End If
            If (Result Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Result,String)
            End If
            If (Reason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Reason,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
